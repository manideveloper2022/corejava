Collections/Data Structures:
--------------------------------
->Is required when we have large group of data.
-> collecting and manipulating a group of objects.
->Operations : searching, sorting, insertion, manipulation, deletion, updation. 
  
  
  
  
Topics:
-----------------------------------------
Arrays , 
List (ArrayList + LinkedList + Vector) 
Set(HashSet + TreeSet +LinkedHashSet) 
Map(HashMap + TreeMap + LinkedHashMap)

import the java.util package while working with  the Collection classes.
  

  
  
  
  
  
  
Arrays:
-------
-> Need to specify the size first 
-> Arrays uses index/position based operations. 
-> all operations like insert , update , delete , read are  based on positions.
-> position numbers starts from zero.



syntax:
--------------
 1. Create array for int for size of 5
int [] numbers = new int[5];    

// int array with size as 5 , numbers -> is the array.
numbers array can store 5 elements from 0 position to 4 position


2. Create array for string with size of 6
 String[] data = new String[6]; 

// string array with size of 6  data -> is the array
  data array can store 6 elements from 0 position to 5 position
  

3. Create array for float with size of 10
float[] nums = new float[10]; 

// float array with size of 10  nums -> is the array
 nums array can store 10 elements from 0 position to 9 position
 
 
4. Create array for person with size of 7
Person[] persons = new Person[7];  

// multiple objs
 
 
 
 
 
 
  
How to Add/update data to an array:
----------------------------------



String[] data = new String[6]; 
if size is 6
store elements from 0 position to 5 position uisng array.




data[0] = "kumar"; // add "kumar" inside an array at position 1
data[1] = "shyam"; // add "shyam" inside an array at position 2
data[2] = "ram"; // add "ram" inside an array at position 3
data[3] = "satya"; // add "satya" inside an array at position 4
data[4] = "siva"; // add "siva" inside an array at position 5
data[5] = "raj"; // add "raj" inside an array at position 6

  
  
  
  
How to Read data from an array:
-------------------------------------
System.out.println(data[0]); // kumar
System.out.println(data[1]); //shyam
System.out.println(data[2]); //  ram
System.out.println(data[3]); // satya
System.out.println(data[4]); // siva
System.out.println(data[5]);  // raj 


How to find array size:
int len = data.length;



Read using loops:
---------------------------
for ( int i=0;i <data.length; i++){
	System.out.println(data[i]);
}





for ( String d: data){
	System.out.println(d);
}








How to Update data in an array:
---------------------------------------
data[0] = "kumar1"; // update "kumar1" inside an array at position 1
data[1] = "shyam1"; // update "shyam1" inside an array at position 2
data[2] = "ram1"; // update "ram1" inside an array at position 3
data[3] = "satya1"; // update "satya1" inside an array at position 4
data[4] = "siva1"; // update "siva1" inside an array at position 5
data[5] = "raj1"; // update "raj1" inside an array at position 6




 Adv:
 -----------
 -use when you know the size
- serach by position is fast


Disadvantages:
------------------
-> Specify size early. 
->Fixed length. Size cannot be increased or decreased 
-> insert in between[multiple right shift operations] is costly
-> remove in between[multiple left shift operations] is costly.
-> search by content is costly

  
  
  
     	
  //when we know size and data
  String names[] ={"user1","user2","user3","user4","user5","user6","user7"};
  int nums[] ={1,24,35,353,64,457,575,85,575};
  

  